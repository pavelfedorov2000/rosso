"use strict";

var app = {
  pathToLibsFiles: './assets/libs'
};
window.app = app; // polyfills
// before polyfills

(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('before')) {
      return;
    }

    Object.defineProperty(item, 'before', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function before() {
        // eslint-disable-next-line prefer-rest-params
        var argArr = Array.prototype.slice.call(arguments);
        var docFrag = document.createDocumentFragment();
        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.parentNode.insertBefore(docFrag, this);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]); // forEach polyfill


if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (callback, thisArg) {
    // eslint-disable-next-line no-param-reassign
    thisArg = thisArg || window;

    for (var i = 0; i < this.length; i++) {
      callback.call(thisArg, this[i], i, this);
    }
  };
}

app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.asideFilters = {
  name: 'asideFilters',
  description: 'your script description',
  init: function init() {
    $('.aside-filters__item-title').not('.aside-filters__item-title--no-drop').on('click', function () {
      $(this).toggleClass('active');
      $(this).next().slideToggle();
    });
    $('.aside-filters__price-range').slider({
      animate: 'slow',
      range: true,
      create: function create(event, ui) {
        $(this).slider("option", "min", $(this).data('price-min'));
        $(this).slider("option", "max", $(this).data('price-max'));
        $(this).slider("option", "values", [$(this).data('price-from'), $(this).data('price-to')]);
        $(this).next().find('.aside-filters__price-value--min').text("".concat($(this).data('price-from'), " \u20BD"));
        $(this).next().find('.aside-filters__price-value--max').text("".concat($(this).data('price-to'), " \u20BD"));
      },
      slide: function slide(event, ui) {
        $(this).next().find('.aside-filters__price-value--min').text("".concat(ui.values[0], " \u20BD"));
        $(this).next().find('.aside-filters__price-value--max').text("".concat(ui.values[1], " \u20BD"));
      },
      stop: function stop(event, ui) {//$(this).prev().find('input.products-filters__value-input--min').trigger('change');
        //$(this).prev().find('input.products-filters__value-input--max').trigger('change');
      }
    });
    $('.catalog-filters__btn').on('click', function () {
      $('.aside-filters').addClass('active');
      $('body').addClass('_lock');
    });
    $('.aside-filters__title').on('click', function () {
      $('.aside-filters').removeClass('active');
      $('body').removeClass('_lock');
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.burger = {
  name: 'burger',
  description: 'burger-btn and burger-menu logic',
  init: function init() {
    // jquery
    $('.burger-btn').on('click', function () {
      if ($('.drop-catalog').hasClass('active')) {
        $('body').removeClass('_lock');
        $('.drop-catalog').removeClass('active');
        $('.js-drop-catalog-more').fadeOut('300');
      } else {
        $('body').toggleClass('_lock');
        $('.burger-menu').toggleClass('burger-menu--active');
      }
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.catalogCard = {
  name: 'catalogCard',
  description: 'your script description',
  init: function init() {
    $('.catalog-card__favorite-btn').on('click', function () {
      $(this).toggleClass('active');

      if ($(this).hasClass('active')) {
        $(this).attr('aria-label', 'Убрать из избранного');
      } else {
        $(this).attr('aria-label', 'Добавить в избранное');
      }
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.dropCatalog = {
  name: 'dropCatalog',
  description: 'your script description',
  init: function init() {
    $('.js-catalog').on('click', function () {
      if ($(window).width() <= 1024) {
        $('.drop-catalog').addClass('active');
      } else {
        $('body').toggleClass('_lock');
        $('.drop-catalog').toggleClass('active');
      }
    });
    $('.js-catalog.burger-menu__title').on('click', function () {
      $('.burger-menu').removeClass('burger-menu--active');
      $('.drop-catalog').addClass('active');
      $('.js-drop-catalog-more').css('display', 'grid');
    });
    $('.js-drop-catalog-more').on('click', function () {
      $(this).fadeOut('300');
      $('.drop-catalog__item').css('display', 'grid');
      $('.drop-catalog__download').css('display', 'inline-grid');
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.frameSystem = {
  name: 'frameSystem',
  description: 'your script description',
  init: function init() {
    new Swiper('.frame-system-slider', {
      loop: true,
      //preloadImages: false,
      //lazy: true,
      slidesPerView: 1,
      //spaceBetween: 30,
      speed: 1000,
      autoplay: {
        delay: 3000
      },
      pagination: {
        el: '.swiper-pagination',
        type: 'fraction'
      },
      navigation: {
        nextEl: '.frame-system__arrow--next',
        prevEl: '.frame-system__arrow--prev'
      },

      /* breakpoints: {
          576: {
              slidesPerView: 2,
          },
          992: {
              slidesPerView: 4,
          }
      }, */
      on: {
        slideChange: function slideChange() {
          new LazyLoad();
        }
      }
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.validation = {
  name: 'validation',
  description: 'your script description',
  init: function init() {
    // validation
    $.validator.addMethod("minlenghtphone", function (value, element) {
      return value.replace(/\D+/g, '').length > 10;
    });
    $.validator.addMethod("requiredphone", function (value, element) {
      return value.replace(/\D+/g, '').length > 1;
    });

    function validateForms(form) {
      $(form).validate({
        rules: {
          name: "required",
          phone: {
            requiredphone: true,
            minlenghtphone: true
          },
          email: "required",
          password: "required",
          repeat_password: {
            required: true,
            equalTo: "#reg_pass"
          }
        },
        submitHandler: function submitHandler() {
          /* $.magnificPopup.open({
              items: {
                  src: '#success',
              }
          }); */
        }
      });
    }

    validateForms('#popup form');
    $('form').on('sumbit', function (e) {
      e.preventDefault();
      $.ajax({
        type: "POST",
        url: "send.php",
        data: $(this).serialize()
      });
      $('.form__input').removeClass('valid');
      $(this).find("input").val("");
      $('form').trigger('reset');
      return false;
    });

    $.fn.setCursorPosition = function (pos) {
      if ($(this).get(0).setSelectionRange) {
        $(this).get(0).setSelectionRange(pos, pos);
      } else if ($(this).get(0).createTextRange) {
        var range = $(this).get(0).createTextRange();
        range.collapse(true);
        range.moveEnd('character', pos);
        range.moveStart('character', pos);
        range.select();
      }
    }; // phone mask


    $("input[name=phone]").on('click', function () {
      $(this).setCursorPosition(4);
    }).mask("+7 (999) 999-99-99");
  }
};
app.addLibs = {
  name: 'addLibs',
  description: 'connect the script library dynamically',
  addScriptFile: function addScriptFile(nameFile, callback) {
    var body = document.getElementsByTagName('body')[0];
    var script = document.createElement('script');

    script.onload = function () {
      return callback && callback();
    };

    script.src = "".concat(app.pathToLibsFiles, "/js/").concat(nameFile, ".js");
    body.appendChild(script);
  },
  addStyleFile: function addStyleFile(nameFile) {
    var appCss = document.getElementById('app-css');
    var link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = "".concat(app.pathToLibsFiles, "/css/").concat(nameFile, ".css");
    appCss.before(link);
  },
  initScript: function initScript(nameFile, nameLib, callback) {
    var hasLibs = null;
    var scripts = document.querySelectorAll('script');
    scripts.forEach(function (el) {
      var str = el.getAttribute('src');

      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });

    if (!hasLibs) {
      this.addScriptFile(nameFile, callback);
    } else {
      var timerId = setInterval(function () {
        if (window[nameLib] || window.jQuery && jQuery()[nameLib]) {
          callback();
          clearInterval(timerId);
        }
      }, 1);
    }
  },
  initStyle: function initStyle(nameFile) {
    var hasLibs = null;
    var link = document.querySelectorAll('link');
    link.forEach(function (el) {
      var str = el.getAttribute('src');

      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });

    if (!hasLibs) {
      this.addStyleFile(nameFile);
    }
  }
};
new LazyLoad(); //new WOW().init();

app.burger.init();
app.dropCatalog.init();
app.frameSystem.init();
app.asideFilters.init();
app.catalogCard.init(); //app.validation.init();
// pageup

/* document.querySelector('.page-up').addEventListener('click', () => {
    window.scrollTo({
        top: 0,
        behavior: "smooth",
    });
}); */
//smoooth scroll to section

/* document.querySelectorAll('.menu__link').forEach(link => {
    link.addEventListener('click', (e) => {
        e.preventDefault();
        window.scrollTo({
            top: document.getElementById(link.getAttribute('data-section')).offsetTop,
            behavior: "smooth"
        });
        body.classList.remove('_lock');
        burgerBtn.classList.remove('burger-btn--active');
        burgerMenu.classList.remove('burger-menu--active');
    });
}); */
// Custom jquery select

/* $('.select__title').on('click', function () {
    $(this).parents('.').siblings().find('.select__title').removeClass('select__title--active');
    $(this).parents('.').siblings().find('.select__content').slideUp('300');
    $(this).toggleClass('select__title--active');
    $(this).next().slideToggle('300');
});

$('.select__option').on('click', function () {
    $(this).parent().prev().text($(this).text());
    $(this).parent().prev().removeClass('select__title--active');
    $(this).parent().slideUp('300');
}); */
// Custom js select

/* let selectItem = document.querySelector('.select');
let selectTitle = selectItem.querySelector('.select__title');
let selectLabels = selectItem.querySelectorAll('.select__label');
// Toggle menu
selectTitle.addEventListener('click', () => {
    if ('active' === selectItem.getAttribute('data-state')) {
        selectItem.setAttribute('data-state', '');
    } else {
        selectItem.setAttribute('data-state', 'active');
    }
});
// Close when click to option
for (let i = 0; i < selectLabels.length; i++) {
    selectLabels[i].addEventListener('click', (e) => {
        selectTitle.textContent = e.target.textContent;
        selectItem.setAttribute('data-state', '');
    });
} */
// js counter +/-

/* const minusBtn = document.querySelector('.minus-btn');
const plusBtn = document.querySelector('.plus-btn');

if (minusBtn) {
    minusBtn.addEventListener('click', function (e) {
        e.preventDefault();
        let input = this.nextElementSibling;
        let value = parseInt(input.value);
        while (value > 0) {
            value--;
            break;
        }
        input.value = value;
    });
}
if (plusBtn) {
    plusBtn.addEventListener('click', function (e) {
        e.preventDefault();
        let input = this.previousElementSibling;
        let value = parseInt(input.value);
        value++;
        input.value = value;
    });
} */
// ymaps

/* ymaps.ready(init);

function init() {

    var myMap = new ymaps.Map("map", {
        center: [55.6938, 37.6001],
        zoom: 4,
        controls: ['zoomControl']
    });


    var myGeoObjects = [];

    myGeoObjects[0] = new ymaps.Placemark([55.755819, 37.617644], {
        clusterCaption: 'Заголовок',
        //balloonContentBody: 'Текст в балуне',
    }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'img/icons/pin.svg',
        // Размеры метки.
        iconImageSize: [45, 50],
        // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        iconImageOffset: [-3, -42]
    });

    myGeoObjects[1] = new ymaps.Placemark([59.939099, 30.315877], {
        clusterCaption: 'Заголовок',
        //balloonContentBody: 'Текст в балуне',
    }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'img/icons/pin.svg',
        // Размеры метки.
        iconImageSize: [45, 50],
        // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        iconImageOffset: [-23, -42]
    });

    myGeoObjects[2] = new ymaps.Placemark([45.035470, 38.975313], {
        clusterCaption: 'Заголовок',
        //balloonContentBody: 'Текст в балуне',
    }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'img/icons/pin.svg',
        // Размеры метки.
        iconImageSize: [45, 50],
        // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        iconImageOffset: [-16, -42]
    });

    var clusterIcons = [{
        href: '/images/pointer.png',
        size: [31, 40],
        offset: [0, 0]
    }];

    var clusterer = new ymaps.Clusterer({
        clusterDisableClickZoom: false,
        clusterOpenBalloonOnClick: false,
        // Устанавливаем стандартный макет балуна кластера "Карусель".
        clusterBalloonContentLayout: 'cluster#balloonCarousel',
        // Устанавливаем собственный макет.
        //clusterBalloonItemContentLayout: customItemContentLayout,
        // Устанавливаем режим открытия балуна. 
        // В данном примере балун никогда не будет открываться в режиме панели.
        clusterBalloonPanelMaxMapArea: 0,
        // Устанавливаем размеры макета контента балуна (в пикселях).
        clusterBalloonContentLayoutWidth: 300,
        clusterBalloonContentLayoutHeight: 200,
        // Устанавливаем максимальное количество элементов в нижней панели на одной странице
        clusterBalloonPagerSize: 5
        // Настройка внешего вида нижней панели.
        // Режим marker рекомендуется использовать с небольшим количеством элементов.
        // clusterBalloonPagerType: 'marker',
        // Можно отключить зацикливание списка при навигации при помощи боковых стрелок.
        // clusterBalloonCycling: false,
        // Можно отключить отображение меню навигации.
        // clusterBalloonPagerVisible: false
    });

    clusterer.add(myGeoObjects);
    myMap.geoObjects.add(clusterer);
} */
//# sourceMappingURL=app.min.js.map
